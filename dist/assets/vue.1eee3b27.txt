1.什么是vue生命周期？
答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。

2.vue生命周期的作用是什么？
答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。

3.vue生命周期总共有几个阶段？
答：它可以总共分为8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后。

4.第一次页面加载会触发哪几个钩子？
答：会触发 下面这几个beforeCreate, created, beforeMount, mounted 。

5.DOM 渲染在 哪个周期中就已经完成？
答：DOM 渲染在 mounted 中就已经完成了。


1. 初始化阶段 :
beforeCreate（创建前） 在数据观测和初始化事件还未开始
created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来
beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。
实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。
mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。
实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。
完成模板中的html渲染到html页面中。此过程中进行ajax交互。

2. 数据更新阶段 :
beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。
可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。
updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。
调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，
应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。

3. 组件销魂阶段 :
beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。
destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。
该钩子在服务器端渲染期间不被调用。

vue常用组件库：iview weapp   vant weapp    weUI

vue实现数据双向绑定主要是: 
   采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty（）
来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监
听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，
Vue 将遍历它的属性，用 Object.defineProperty 将它们转为 getter/setter。
用户看不到 getter/setter，但是在内部它们让 Vue 追踪依赖，在属性被访问和修
改时通知变化。


vue与AngularJS的区别
相同点：
都支持指令、过滤器和双向数据绑定；都不支持低端浏览器。

不同点：
AngularJS的学习成本高，而Vue简单易学、API都比较简单、直观；
在性能上，AngularJS依赖对数据做脏检查，所以Watcher越多越慢；
Vue.js使用基于依赖追踪的观察并且使用异步队列更新，所有的数据都是独立触发的。

vue与React的区别
相同点：
两者都需要编译后使用
中心思想相同：一切都是组件，组件实例之间可以嵌套；
都提供生命钩子函数，可以让开发者定制化地去处理需求；
都不内置列数AJAX，Route等功能到核心包，而是以插件的方式加载；
在组件开发中都支持mixins的特性。

不同点：
React采用的 虚拟DOM 会对渲染出来的结果做脏检查；
Vue.js在模板中提供了指令，过滤器等，可以非常方便，快捷地操作Virtual DOM。





********BOM********

浏览器内部的一些对象
Navigator 对象：包含浏览器信息的对象返回浏览器的信息，
因为考虑的浏览器兼容问题，所以还有点用。
Screen对象 ：显示与屏幕有关数据的
对象属性：长宽高什么的，没什么用
History对象：包含用户访问的URL值的对象
重要方法：history.back();  和   history.forward();      
                //返回上一个 URL    前进到下一个URL 
location对象：包含当前URL信息的对象
重要属性：location.href     该属性返回当前URL值，也可以赋值成想要的URL值。   
window对象：包含浏览器窗口的信息和方法的对象
属性：包括navigator，screen， history ，location等等的方法
方法：  alert（）对话框   confirm（）确认框    open（）打开新窗口   close（）关闭该窗口
  setinterval（）设置间隔调用循环执行代码         setTimeout    在多少毫秒后执行一次代码


